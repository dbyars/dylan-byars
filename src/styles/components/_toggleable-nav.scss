/* Styles for the ToggleableNav component */

// Variables and such
$items: 4;
$transition-duration: 0.5s;
$transition-delay: 0.1s;
$color--red: #EC7263;

*,
*:before,
*:after {
  box-sizing: border-box;
}

.nav-toggle {
  position: fixed;
  top: 0;
  left: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 55px;
  height: 55px;
  margin: 25px;
  z-index: 9999;
}

// Styles for the toggle when the menu's not open

.nav-toggle__button {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: transparent;
  cursor: pointer;
  border-radius: 50%;
  transition: $transition-duration + 0.1;

  // Shadow on hover
  &:hover {
    box-shadow: 0 0 0 18px rgba(0, 0, 0, 0.1), inset 0 0 0 35px rgba(0, 0, 0, 0.1);
  }

  // Making the "X" icon using `:before` and `:after` pseudo-elements
  // Initially hidden because `scale(0)` transformation
  &:before, 
  &:after {
    position: absolute;
    content: '';
    top: 50%;
    left: 25%;
    width: 50%;
    height: 2px;
    background-color: $color--red;
    border-radius: 5px;
    transition: $transition-duration;
  }

  &:before {
    transform: translateY(-50%) rotate(45deg) scale(0);
  }

  &:after {
    transform: translateY(-50%) rotate(-45deg) scale(0);
  }
}

.nav__items {
  // Don't want pointer-events as menu is closed... but why?
  pointer-events: none;
  transition: $transition-duration;
}

// Showing nav items as lines, making up the menu icon
.nav__item {
  position: relative;
  display: inline-block;
  float: left;
  clear: both;
  color: transparent;
  font-size: 14px;
  letter-spacing: -5.5px;
  text-transform: uppercase;
  text-decoration: none;
  height: 7px;
  line-height: 7px;
  white-space: nowrap;
  transform: scaleY(0.2);
  transition: $transition-duration, opacity 0.1s;

  // Setting delays for the nav items in close transition
  @for $i from 1 through $items {
    &:nth-child(#{$i}) {
      $delay: ($i - 1) * $transition-delay;
      transition-delay: $delay;
      &:before {
        transition-delay: $delay;
      }
    }
  }

  // Getting the lines for the hamburger menu icon
  &:before {
    position: absolute;
    content: '';
    top: 50%;
    left: 0;
    width: 100%;
    height: 2.5px;
    background-color: $color--red;
    transform: translateY(-50%) scaleY(5);
    transition: $transition-duration;
  }
}

// Styles for the 'open' state
.nav-toggle--open {
  
  // the backdrop to click on for closing the menu when it's open
  & > .back-drop {
    position: fixed;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    z-index: 9998;
  }

  // Making the "X" icon using `:before` and `:after` pseudo-elements
  & > .nav-toggle__button {
    box-shadow: 0 0 0 325px rgba(0, 0, 0, 0.9), inset 0 0 0 35px rgba(0, 0, 0, 0.9);

    &:hover {
      box-shadow: 0 0 0 325px rgba(0, 0, 0, 0.9), inset 0 0 0 35px rgba(0, 0, 0, 0.9), 0 0 0 8px rgba(0, 0, 0, 0.9), inset 0 0 0 35px rgba(0, 0, 0, 0.9);
      border: 1px solid yellow;
    }

    &:before {
      transform: translateY(-50%) rotate(45deg) scale(1.1);
    }

    &:after {
      transform: translateY(-50%) rotate(-45deg) scale(1.1);
    }
  }

  // Open nav
  & > .nav__items {
    pointer-events: auto;
    // change this depending on the screen size. !! MEDIA QUERY STUFF LATER
    transform: translate(62.5px, 135px);
    z-index: 9999;

    // Restoring nav items from lines in the menu icon
    .nav__item {
      color: $color--red;
      letter-spacing: 0;
      font-size: 19px;
      height: 30px;
      margin-bottom: 9px;
      display: flex;
      align-items: center;
      opacity: 1;
      transform: scaleY(1);
      transition: $transition-duration, opacity 0.1s;
      
      // Hover effect for links
      &:hover {

      }

      // Setting delays for the nav items in open transition
      @for $i from 1 through $items {
        &:nth-child(#{$i}) {
          $delay: ($items - $i) * $transition-delay;
          transition-delay: $delay;
          &:before {
            transition-delay: $delay;
          }
        }
      }

      // Hiding the lines
      &:before {
        opacity: 0;
      }
    }
  }
}

